// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: user_center.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UserCenterService_CheckAuth_FullMethodName       = "/user_center.UserCenterService/CheckAuth"
	UserCenterService_GetUserInfo_FullMethodName     = "/user_center.UserCenterService/GetUserInfo"
	UserCenterService_UpdateUserToken_FullMethodName = "/user_center.UserCenterService/UpdateUserToken"
)

// UserCenterServiceClient is the client API for UserCenterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserCenterServiceClient interface {
	CheckAuth(ctx context.Context, in *UserToken, opts ...grpc.CallOption) (*AuthCheckResult, error)
	GetUserInfo(ctx context.Context, in *UserToken, opts ...grpc.CallOption) (*UserInfo, error)
	UpdateUserToken(ctx context.Context, in *UserToken, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type userCenterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserCenterServiceClient(cc grpc.ClientConnInterface) UserCenterServiceClient {
	return &userCenterServiceClient{cc}
}

func (c *userCenterServiceClient) CheckAuth(ctx context.Context, in *UserToken, opts ...grpc.CallOption) (*AuthCheckResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthCheckResult)
	err := c.cc.Invoke(ctx, UserCenterService_CheckAuth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCenterServiceClient) GetUserInfo(ctx context.Context, in *UserToken, opts ...grpc.CallOption) (*UserInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserInfo)
	err := c.cc.Invoke(ctx, UserCenterService_GetUserInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCenterServiceClient) UpdateUserToken(ctx context.Context, in *UserToken, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, UserCenterService_UpdateUserToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserCenterServiceServer is the server API for UserCenterService service.
// All implementations must embed UnimplementedUserCenterServiceServer
// for forward compatibility.
type UserCenterServiceServer interface {
	CheckAuth(context.Context, *UserToken) (*AuthCheckResult, error)
	GetUserInfo(context.Context, *UserToken) (*UserInfo, error)
	UpdateUserToken(context.Context, *UserToken) (*emptypb.Empty, error)
	mustEmbedUnimplementedUserCenterServiceServer()
}

// UnimplementedUserCenterServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserCenterServiceServer struct{}

func (UnimplementedUserCenterServiceServer) CheckAuth(context.Context, *UserToken) (*AuthCheckResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAuth not implemented")
}
func (UnimplementedUserCenterServiceServer) GetUserInfo(context.Context, *UserToken) (*UserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfo not implemented")
}
func (UnimplementedUserCenterServiceServer) UpdateUserToken(context.Context, *UserToken) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserToken not implemented")
}
func (UnimplementedUserCenterServiceServer) mustEmbedUnimplementedUserCenterServiceServer() {}
func (UnimplementedUserCenterServiceServer) testEmbeddedByValue()                           {}

// UnsafeUserCenterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserCenterServiceServer will
// result in compilation errors.
type UnsafeUserCenterServiceServer interface {
	mustEmbedUnimplementedUserCenterServiceServer()
}

func RegisterUserCenterServiceServer(s grpc.ServiceRegistrar, srv UserCenterServiceServer) {
	// If the following call pancis, it indicates UnimplementedUserCenterServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserCenterService_ServiceDesc, srv)
}

func _UserCenterService_CheckAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCenterServiceServer).CheckAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserCenterService_CheckAuth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCenterServiceServer).CheckAuth(ctx, req.(*UserToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCenterService_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCenterServiceServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserCenterService_GetUserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCenterServiceServer).GetUserInfo(ctx, req.(*UserToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCenterService_UpdateUserToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCenterServiceServer).UpdateUserToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserCenterService_UpdateUserToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCenterServiceServer).UpdateUserToken(ctx, req.(*UserToken))
	}
	return interceptor(ctx, in, info, handler)
}

// UserCenterService_ServiceDesc is the grpc.ServiceDesc for UserCenterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserCenterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user_center.UserCenterService",
	HandlerType: (*UserCenterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckAuth",
			Handler:    _UserCenterService_CheckAuth_Handler,
		},
		{
			MethodName: "GetUserInfo",
			Handler:    _UserCenterService_GetUserInfo_Handler,
		},
		{
			MethodName: "UpdateUserToken",
			Handler:    _UserCenterService_UpdateUserToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user_center.proto",
}
