# Secret 保存密码
---
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
  namespace: llm-web
type: Opaque
data:
  root-password: eW91cl9wYXNzd29yZA==

---
apiVersion: v1
kind: Secret
metadata:
  name: redis-secret
  namespace: llm-web
type: Opaque
data:
  root-password: MTIzNDU2

---
apiVersion: v1
kind: Secret
metadata:
  name: mongo-secret
  namespace: llm-web
type: Opaque
data:
  username: cm9vdA==
  password: MTIzNDU2

# MySQL 配置
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
  namespace: llm-web
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
        - name: mysql
          image: mysql:8.0.31
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: root-password
          ports:
            - containerPort: 3306
          volumeMounts:
            - name: mysql-data
              mountPath: /var/lib/mysql
      volumes:
        - name: mysql-data
          persistentVolumeClaim:
            claimName: mysql-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: mysql-svc
  namespace: llm-web
spec:
  type: ClusterIP
  selector:
    app: mysql
  ports:
    - port: 3306
      targetPort: 3306

# Redis 配置
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: llm-web
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
        - name: redis
          args: ["--requirepass $(REDIS_PASSWORD)"]
          image: redis:6.0
          env:
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: redis-secret
                  key: root-password
          ports:
            - containerPort: 6379
          volumeMounts:
            - name: redis-data
              mountPath: /data
      volumes:
        - name: redis-data
          persistentVolumeClaim:
            claimName: redis-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: redis-svc
  namespace: llm-web
spec:
  type: ClusterIP
  selector:
    app: redis
  ports:
    - port: 6379
      targetPort: 6379

# Kafka 配置（使用KRaft模式）
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka
  namespace: llm-web
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kafka
  template:
    metadata:
      labels:
        app: kafka
    spec:
      containers:
        - name: kafka
          image: bitnami/kafka:3.7.0
          env:
            - name: KAFKA_ENABLE_KRAFT
              value: "yes"
            - name: KAFKA_CFG_PROCESS_ROLES
              value: "controller,broker"
            - name: KAFKA_CFG_NODE_ID
              value: "1"
            - name: KAFKA_CFG_CONTROLLER_QUORUM_VOTERS
              value: "1@kafka:9093"
            - name: KAFKA_CFG_LISTENERS
              value: "PLAINTEXT://:9092,CONTROLLER://:9093"
            - name: KAFKA_CFG_CONTROLLER_LISTENER_NAMES
              value: "CONTROLLER"
            - name: KAFKA_CFG_ADVERTISED_LISTENERS
              value: "PLAINTEXT://kafka:9092"
            - name: KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP
              value: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT"
          ports:
            - containerPort: 9092
            - containerPort: 9093
          volumeMounts:
            - name: kafka-data
              mountPath: /bitnami/kafka
      volumes:
        - name: kafka-data
          persistentVolumeClaim:
            claimName: kafka-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: kafka-svc
  namespace: llm-web
spec:
  type: ClusterIP
  selector:
    app: kafka
  ports:
    - name: plaintext
      port: 9092
      targetPort: 9092
    - name: controller
      port: 9093
      targetPort: 9093

# MongoDB 配置
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongo
  namespace: llm-web
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongo
  template:
    metadata:
      labels:
        app: mongo
    spec:
      containers:
        - name: mongo
          image: mongo:latest
          args: [ "--auth" ]  # 启用认证
          env:
            - name: MONGO_INITDB_ROOT_USERNAME
              valueFrom:
                secretKeyRef:
                  name: mongo-secret
                  key: username
            - name: MONGO_INITDB_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mongo-secret
                  key: password
          ports:
            - containerPort: 27017
          volumeMounts:
            - name: mongo-data
              mountPath: /data/components
      volumes:
        - name: mongo-data
          persistentVolumeClaim:
            claimName: mongo-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: mongo-svc
  namespace: llm-web
spec:
  type: ClusterIP
  selector:
    app: mongo
  ports:
    - port: 27017
      targetPort: 27017